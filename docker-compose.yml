version: '3.8'
services:
  db:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - '5432:5432'
    volumes:
      - nest_demo_db:/var/lib/postgresql/data
  
  backend-raw-sql:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nestjs-backend
    ports:
      - "5000:5000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      DROP_TABLE_PASSWORD: ${DROP_TABLE_PASSWORD}
    depends_on:
      - db
    volumes:
      - ./backend:/app:cached
      - /app/node_modules
    command: npm run start:prod
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend         
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - '80:80'                 
    depends_on:
      - backend-raw-sql           
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_HOST: backend
      REACT_APP_BACKEND_PORT: ${REACT_APP_BACKEND_PORT}

volumes:
  nest_demo_db:
  
# backend-typeorm:
#   build:
#     context: ./backend
#     dockerfile: Dockerfile
#   container_name: nestjs-backend-typeorm
#   ports:
#     - "3001:3000"
#   environment:
#     POSTGRES_HOST: db
#     POSTGRES_PORT: ${POSTGRES_PORT}
#     POSTGRES_USER: ${POSTGRES_USER}
#     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#     POSTGRES_DATABASE: ${POSTGRES_DATABASE}
#     DROP_TABLE_PASSWORD: ${DROP_TABLE_PASSWORD}
#   depends_on:
#     - db
#   volumes:
#     - ./backend:/app:cached
#     - /app/node_modules
#   command: npm start
#   restart: unless-stopped


